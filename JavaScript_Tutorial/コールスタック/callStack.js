//コールスタックについて説明する前に、まずはコードを提示する
function a() {
}
function b() {
    a();
}
function c() {
    b();
}
c();

//cが実行される、cの中ではbが実行されている
//そのbの中ではaが実行されている

//この時のコンテキストの生成のされ方に着目する

//まずコードが始まる時にグローバルコンテキストが生成される
//cの関数が実行されるときに、cの関数コンテキストが生成される
//そのcの関数の中で、bの関数が呼ばれている。そこでbの関数が実行されてbの関数コンテキストが生成される
//そのbの関数の中で、aの関数が呼ばれ、そこでaの関数コンテキストが生成される
//グローバルコンテキスト→cの関数コンテキスト→の関数コンテキスト→aの関数コンテキストの順にコンテキストが積まれる。
//これがコールスタックと呼ばれるコンテキストの積み重ねである

//上記に記述したコードの場合、実行中のコンテキストは、aのコンテキストとなる。
//コールスタックの一番上に積まれたコンテキストが実行中のコンテキストになる
//aの処理が終わると、aのコンテキストは消滅し、bの処理が始まる
//さらにbの処理が終わると、bのコンテキストも消滅し、cの処理が始まるわけである。
//そのcの処理も終わると、cのコンテキストも消滅し、最後にグローバルの処理も終わると、グローバルコンテキストも消滅する

//実際にブラウザを立ち上げて検証モードを開き、ソースをクリックして確認できる(コンソールではないので注意)
//実行されている様子を見たいJSファイルをクリックし、実行タイミングを見たい関数にブレイクポイントを設定する
//今回の場合は、10行目のcの関数に設定し、画面をリロードしてみる(ショートカットキーはcommand + R)

//これらのコンテキストを積み重ねて、一番上に積み重なった順から処理、消滅していく流れのことを「LIFO」と呼ぶ
//LIFOとはLast In, First Outの略である(後入れ先出しの意味)
//

//余談
//FIFO(Fist In, First Out)と呼ばれるスタックも存在する
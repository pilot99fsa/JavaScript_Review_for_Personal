//関数スコープとは？
function a() {
    //この鉤括弧の中を関数スコープと呼ぶ
    let b = 0;
    console.log(b)
}
a();

//////////////////////

function c() {
    let d = 0;
}
//関数スコープの外
console.log(d) //console.log(d)を外で呼び出すとエラーになる
d();
//これは関数cの関数スコープの中で宣言された変数dが、関数cの関数スコープ内でのみ呼び出し可能だからである
//スコープとは実行コードからその変数が見えるか見えないかがポイントになる。
//上記のコードではconsole.log(d)は関数cの関数スコープの外なので、変数dを取得できないのである
//

//
//ブロックスコープについて
//確認:JSにおいてブロックとは波括弧{}のことを指す
//つまり{}の中身をブロックスコープと呼ぶ

//だが関数宣言の場合は、{}の前に関数宣言が存在し、function 関数名に{}が続いているが、これは関数スコープとなる
//JavaScriptでブロックスコープを使うには条件がある
//letもしくはconstを使うことである

{
    let e = 1;
    const f = 2;
    console.log(e);
    //ブロックスコープの中でのみ、eの値を取得可能
}
//console.log(f)...ブロックスコープの外なのでfの値を取得不可能

{
    var g = 2;
}
console.log(g) //コンソールを確認すると、ブロックスコープの外であるにも関わらず、gの値が取得できている
//このようにvarは意図しない挙動をする可能性が非推奨である理由の一つとなっている
//関数宣言も同様に、ブロックスコープの中で変数を宣言して外からconsole.logで変数の値を取得できてしまう(ブロックスコープを無視してしまう。)
//このような本来の意図を無視した使い方はバグやエラーの温床となるので注意する
//関数式の場合はしっかりブロックスコープが適用され、スコープ外からは参照できなくなる



//暗黙的な型変換
//変数が呼ばれた状況によって変数の方が自動的に変換される
//JSの婆愛、文字列として定義された変数が状況によって数値として取り扱われる

//JavaScriptは変数宣言時に過多の宣言がないため、動的型付け言語と呼ばれる

let a = 0; //右辺で代入される値には型が定義されていないため、使用される状況次第で変数の型が変更される

////////////////////////

//静的型付け言語
//C言語、Java、TypeScriptなど

// int a = 0;

//変数宣言時に型の宣言があり、使用状況に左右されず、同じ型を保持する

//

//プロジェクトが大きくなればなるほど静的型付け言語の方がメンテナンスが楽である

///////////////////////////////

let b = 0;

console.log(typeof b); //typeof　でデータ型を確認できる。(コンソールに表示される)

//

function printTypeAndValue(val) { //valに引数を渡す
    console.log(typeof val, val)
}

let c = 0;

printTypeAndValue(c); //printTypeAndValue()の引数に変数cを渡して関数を実行

//

let d = '1' + a; //文字列のデータ型と数値のデータ型が代入される

printTypeAndValue(d);
//この場合、文字列'1'のデータ型にあわせてaも文字列のデータ型に変換される。つまり文字列と文字列の結合になる
//よって'1' + '0'に変換されてコンソールに10と表示される。文字列と文字列を結合しただけになる(ナンバー型、つまり数値ではないので数字の足し算である1+0=1にはならない)
//コンソールにも明示的にStringと表示される

//

let e = 15 - d;//15は数値、真ん中の-(マイナス)は数値の計算にしか使われないため、変数dは自動的に数値に変換される

printTypeAndValue(e) //よってコンソールにはNunmberが明示的に表示され、15-10の引き算の結果である5が表示される

//+(プラス)は数値の計算か文字列の結合、どちらにも使用できる

//

let f = e - null; //nullは参照を保持しない、つまり空(から)を意味する

printTypeAndValue(f) //コンソールにNumber型と計算結果の5が表示される
//これはnullが数値の０に暗黙的に変換された結果である

//

let g = f - true; //tureは真偽地でtureかfalseで真偽を表す

printTypeAndValue(g) //計算に使われた場合、trueは数値の1に変換される
//よって5-1=4となる

//

let h = parseInt('1') + a; //parseIntで数値の1に変換される

printTypeAndValue(h);

//異なる型同士の計算はバグの原因となるため、要注意である
//プログラミングでのコンテキストとはコードを実行する際の文脈・状況という意味合いで使われる
//

//グローバルコンテキスト
//関数コンテキスト
//evalコンテキスト

//上二つが大切(evalは現在では非推奨)
//ES6から追加されたモジュールを使用するとモジュールコンテキストが使用できる
//

//
//グローバルコンテキスト
//グローバルコンテキストで使えるのは
//実行中のコンテキスト内の変数と関数（宣言した変数と関数）
//グローバルオブジェクト
//this

//
//関数コンテキスト
//関数コンテキストで使えるのは
//実行中のコンテキスト内の変数と関数（宣言した変数と関数）
//argumemts
//super
//this
//外部変数

//グローバルコンテキスト、関数コンテキストともにコンテキスト内で宣言した変数が使用できる
//index.htmlからindex.jsを読み込んでいるが、index.jsに書き込まれたコードが実行される環境がグローバルコンテキストとなる
//

//
//グローバルコンテキストを具体的に
let a = 0;
function b() { }
//グローバルコンテキスト内で変数と関数を宣言する

console.log(a)
b()
//上記で宣言した変数と関数を使用する
//「グローバルコンテキスト内で宣言した変数と関数を使用する」というのは、このような状況および流れのことを指す(表現する)
//

//
//関数コンテキストとは関数が実行されているときに生成されているコンテキストのこと
let c = 0;
function d() {
    //②下記で宣言された関数dを実行しているが、実行されている関数のブロックの中が関数コンテキストである(鉤括弧で括られか場所、つまりこのコメントアウトを記しているまさにここが関数コンテキストである。下のconsole.logも関数コンテキストに当たる
    console.log(
        this,
        arguments,
        c //これが外部変数に当たる(関数の外で宣言された変数)
    )
};

// console.log(c);
d(); //①ここでdと宣言した関数を実行している。